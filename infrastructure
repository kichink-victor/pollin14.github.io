<h1 id="micro-caching">Micro-caching</h1>



<h2 id="introduction">Introduction</h2>

<p>Our web site had performance issues in the Christmas season. Our web servers used a lot of CPU so we had to add a new node to process the request to Web, API, Backend hosts. The overflow was caused by the integration of new partners that has been using heavily our API and the huge amount of orders in our database.</p>

<p>We can improve the code, or course. But there are other options with some extra benefits.</p>



<h2 id="resume">Resume</h2>

<p>In this document I am going to test how much the performance of the app improvements using caching on the second of the resource heavier in the app: <code>/api/v1/places</code>. The first places is to /orders. I am going to test two way to cache the response: <em>nginx</em> disk cache and <em>memcached</em>.</p>



<h2 id="theory">Theory</h2>

<p>On the one hand there is <em>Memcached</em> that is an external service to the web server so that it could have latency, and as is very knowing one is vary expensive in money and time. However, in this testing the memcached service run in the same machine, so the latency is present but little.</p>

<p>On other hand, has the <em>nginx</em>’s disk cache and it is well know the access to disk is always more expensive than access to memory. This could be a critical point to choose <em>memcached</em> instead <em>nginx</em>. However if <em>nginx</em> is running on a Linux OS these files are loaded in memory for fast access. Therefore, <em>nginx</em>’s disk cache should be faster than <em>memcached</em>.</p>



<h2 id="specifications">Specifications</h2>

<p>The tests are going run locally with the app in production mode. The local machine has a core i5 with 8gb in ram and a SSD. Also, it has the same services (mysql, memcached and nginx) and database that production (in the time to run this tests).</p>

<p>The software of testing will be Apache Benchmark. The command and its configuration is the following</p>

<p><code>ab -t 30 -c 10 https://api.local.clickbus.com.mx/api/v1/places</code></p>

<p>Some issues before the tests. The implementation was straightforward to <em>nginx</em>’s disc caching. However to <em>memcached</em> was necessary research to enabled. The issue was that it requires the application saves the response. Then, an extra work is required to use <em>memcached</em> as cache of responses of nginx.</p>



<h2 id="results">Results</h2>

<table>
<thead>
<tr>
  <th>Cached system</th>
  <th>Response by seconds (mean)</th>
  <th>Improvement (increase/original*100) %</th>
</tr>
</thead>
<tbody><tr>
  <td>Without</td>
  <td>1.68</td>
  <td>0</td>
</tr>
<tr>
  <td>Nginx</td>
  <td>355</td>
  <td>15,078%</td>
</tr>
<tr>
  <td>Memcached</td>
  <td>151</td>
  <td>9,363%</td>
</tr>
</tbody></table>


<p>It is clear that <em>nginx</em>’s disc cache has the better performance and we expected memcached improves the performance however the latency was a critical point, though, the tests and all the services involved are in the same machine, in production where the <em>memcached</em> service and <em>nginx</em> are in different machines the lantecy will be more big.</p>



<h2 id="conclusion">Conclusion</h2>

<p>Using micro-caching improves the performance in a brutal way, we achieved process over 150 request without matter that cache we used. However, the <em>nginx</em>’s cache gives us more performance without touch the code of the app and if a new response has to be cached then only a new rule has to be added to <em>nginx</em> instead of wait a release and deploys  the changes of the app to save the response. </p>



<h2 id="references">References</h2>

<p>[1] Facebook Cookbook: Building Applications to Grow Your Facebook Empire, October 2008 Jay Goldman, chapter <em>Advanced Caching with Nginx and memcached</em> <br>
[2] <a href="https://www.nginx.com/blog/benefits-of-microcaching-nginx/">https://www.nginx.com/blog/benefits-of-microcaching-nginx/</a> 2016-12 <br>
[3] <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_path">http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_path</a> 2016-12</p>



<h2 id="appendix">Appendix</h2>



<h3 id="wihtout-any-cache">Wihtout any cache</h3>



<pre class="prettyprint"><code class="language-bash hljs ">This is ApacheBench, Version <span class="hljs-number">2.3</span> &lt;<span class="hljs-variable">$Revision</span>: <span class="hljs-number">1706008</span> $&gt;
Copyright <span class="hljs-number">1996</span> Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking api.local.clickbus.com.mx (be patient)
Finished <span class="hljs-number">54</span> requests


Server Software:        nginx/<span class="hljs-number">1.10</span>.<span class="hljs-number">0</span>
Server Hostname:        api.local.clickbus.com.mx
Server Port:            <span class="hljs-number">443</span>
SSL/TLS Protocol:       TLSv1.<span class="hljs-number">2</span>,ECDHE-RSA-AES256-GCM-SHA384,<span class="hljs-number">2048</span>,<span class="hljs-number">256</span>

Document Path:          /api/v1/places
Document Length:        <span class="hljs-number">672864</span> bytes

Concurrency Level:      <span class="hljs-number">10</span>
Time taken <span class="hljs-keyword">for</span> tests:   <span class="hljs-number">32.090</span> seconds
Complete requests:      <span class="hljs-number">54</span>
Failed requests:        <span class="hljs-number">0</span>
Total transferred:      <span class="hljs-number">36364194</span> bytes
HTML transferred:       <span class="hljs-number">36334656</span> bytes
Requests per second:    <span class="hljs-number">1.68</span> [<span class="hljs-comment">#/sec] (mean)</span>
Time per request:       <span class="hljs-number">5942.524</span> [ms] (mean)
Time per request:       <span class="hljs-number">594.252</span> [ms] (mean, across all concurrent requests)
Transfer rate:          <span class="hljs-number">1106.65</span> [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        <span class="hljs-number">3</span>   <span class="hljs-number">10</span>  <span class="hljs-number">12.2</span>      <span class="hljs-number">4</span>      <span class="hljs-number">37</span>
Processing:  <span class="hljs-number">1750</span> <span class="hljs-number">5013</span> <span class="hljs-number">1255.5</span>   <span class="hljs-number">4740</span>    <span class="hljs-number">8661</span>
Waiting:     <span class="hljs-number">1748</span> <span class="hljs-number">5010</span> <span class="hljs-number">1254.7</span>   <span class="hljs-number">4739</span>    <span class="hljs-number">8659</span>
Total:       <span class="hljs-number">1784</span> <span class="hljs-number">5023</span> <span class="hljs-number">1252.4</span>   <span class="hljs-number">4744</span>    <span class="hljs-number">8665</span>

Percentage of the requests served within a certain time (ms)
  <span class="hljs-number">50</span>%   <span class="hljs-number">4744</span>
  <span class="hljs-number">66</span>%   <span class="hljs-number">5101</span>
  <span class="hljs-number">75</span>%   <span class="hljs-number">5299</span>
  <span class="hljs-number">80</span>%   <span class="hljs-number">5853</span>
  <span class="hljs-number">90</span>%   <span class="hljs-number">6768</span>
  <span class="hljs-number">95</span>%   <span class="hljs-number">7616</span>
  <span class="hljs-number">98</span>%   <span class="hljs-number">7620</span>
  <span class="hljs-number">99</span>%   <span class="hljs-number">8665</span>
 <span class="hljs-number">100</span>%   <span class="hljs-number">8665</span> (longest request)</code></pre>



<h3 id="using-nginx-cache">Using NGINX cache</h3>



<pre class="prettyprint"><code class="language-bash hljs ">This is ApacheBench, Version <span class="hljs-number">2.3</span> &lt;<span class="hljs-variable">$Revision</span>: <span class="hljs-number">1706008</span> $&gt;
Copyright <span class="hljs-number">1996</span> Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking api.local.clickbus.com.mx (be patient)
Completed <span class="hljs-number">5000</span> requests
Completed <span class="hljs-number">10000</span> requests
Finished <span class="hljs-number">10655</span> requests


Server Software:        nginx/<span class="hljs-number">1.10</span>.<span class="hljs-number">0</span>
Server Hostname:        api.local.clickbus.com.mx
Server Port:            <span class="hljs-number">443</span>
SSL/TLS Protocol:       TLSv1.<span class="hljs-number">2</span>,ECDHE-RSA-AES256-GCM-SHA384,<span class="hljs-number">2048</span>,<span class="hljs-number">256</span>

Document Path:          /api/v1/places
Document Length:        <span class="hljs-number">672864</span> bytes

Concurrency Level:      <span class="hljs-number">10</span>
Time taken <span class="hljs-keyword">for</span> tests:   <span class="hljs-number">30.003</span> seconds
Complete requests:      <span class="hljs-number">10655</span>
Failed requests:        <span class="hljs-number">0</span>
Total transferred:      <span class="hljs-number">7179313708</span> bytes
HTML transferred:       <span class="hljs-number">7173981708</span> bytes
Requests per second:    <span class="hljs-number">355.14</span> [<span class="hljs-comment">#/sec] (mean)</span>
Time per request:       <span class="hljs-number">28.158</span> [ms] (mean)
Time per request:       <span class="hljs-number">2.816</span> [ms] (mean, across all concurrent requests)
Transfer rate:          <span class="hljs-number">233681.33</span> [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        <span class="hljs-number">3</span>   <span class="hljs-number">21</span>   <span class="hljs-number">7.3</span>     <span class="hljs-number">24</span>      <span class="hljs-number">39</span>
Processing:     <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">4.4</span>      <span class="hljs-number">4</span>      <span class="hljs-number">32</span>
Waiting:        <span class="hljs-number">0</span>    <span class="hljs-number">3</span>   <span class="hljs-number">1.5</span>      <span class="hljs-number">3</span>      <span class="hljs-number">25</span>
Total:          <span class="hljs-number">6</span>   <span class="hljs-number">28</span>   <span class="hljs-number">6.0</span>     <span class="hljs-number">29</span>      <span class="hljs-number">64</span>

Percentage of the requests served within a certain time (ms)
  <span class="hljs-number">50</span>%     <span class="hljs-number">29</span>
  <span class="hljs-number">66</span>%     <span class="hljs-number">29</span>
  <span class="hljs-number">75</span>%     <span class="hljs-number">30</span>
  <span class="hljs-number">80</span>%     <span class="hljs-number">31</span>
  <span class="hljs-number">90</span>%     <span class="hljs-number">36</span>
  <span class="hljs-number">95</span>%     <span class="hljs-number">37</span>
  <span class="hljs-number">98</span>%     <span class="hljs-number">41</span>
  <span class="hljs-number">99</span>%     <span class="hljs-number">44</span>
 <span class="hljs-number">100</span>%     <span class="hljs-number">64</span> (longest request)</code></pre>

<p>### Using MEMCACHED</p>



<pre class="prettyprint"><code class="language-bash hljs ">This is ApacheBench, Version <span class="hljs-number">2.3</span> &lt;<span class="hljs-variable">$Revision</span>: <span class="hljs-number">1706008</span> $&gt;
Copyright <span class="hljs-number">1996</span> Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking api.local.clickbus.com.mx (be patient)
Finished <span class="hljs-number">4547</span> requests


Server Software:        nginx/<span class="hljs-number">1.10</span>.<span class="hljs-number">0</span>
Server Hostname:        api.local.clickbus.com.mx
Server Port:            <span class="hljs-number">443</span>
SSL/TLS Protocol:       TLSv1.<span class="hljs-number">2</span>,ECDHE-RSA-AES256-GCM-SHA384,<span class="hljs-number">2048</span>,<span class="hljs-number">256</span>

Document Path:          /api/v1/places
Document Length:        <span class="hljs-number">672864</span> bytes

Concurrency Level:      <span class="hljs-number">10</span>
Time taken <span class="hljs-keyword">for</span> tests:   <span class="hljs-number">30.012</span> seconds
Complete requests:      <span class="hljs-number">4547</span>
Failed requests:        <span class="hljs-number">0</span>
Total transferred:      <span class="hljs-number">3062114512</span> bytes
HTML transferred:       <span class="hljs-number">3061077112</span> bytes
Requests per second:    <span class="hljs-number">151.51</span> [<span class="hljs-comment">#/sec] (mean)</span>
Time per request:       <span class="hljs-number">66.004</span> [ms] (mean)
Time per request:       <span class="hljs-number">6.600</span> [ms] (mean, across all concurrent requests)
Transfer rate:          <span class="hljs-number">99637.96</span> [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        <span class="hljs-number">2</span>   <span class="hljs-number">24</span>  <span class="hljs-number">17.5</span>     <span class="hljs-number">22</span>     <span class="hljs-number">135</span>
Processing:    <span class="hljs-number">10</span>   <span class="hljs-number">42</span>  <span class="hljs-number">19.6</span>     <span class="hljs-number">38</span>     <span class="hljs-number">151</span>
Waiting:        <span class="hljs-number">0</span>   <span class="hljs-number">22</span>  <span class="hljs-number">18.7</span>     <span class="hljs-number">21</span>     <span class="hljs-number">132</span>
Total:         <span class="hljs-number">14</span>   <span class="hljs-number">66</span>  <span class="hljs-number">25.4</span>     <span class="hljs-number">64</span>     <span class="hljs-number">200</span>

Percentage of the requests served within a certain time (ms)
  <span class="hljs-number">50</span>%     <span class="hljs-number">64</span>
  <span class="hljs-number">66</span>%     <span class="hljs-number">74</span>
  <span class="hljs-number">75</span>%     <span class="hljs-number">81</span>
  <span class="hljs-number">80</span>%     <span class="hljs-number">85</span>
  <span class="hljs-number">90</span>%     <span class="hljs-number">99</span>
  <span class="hljs-number">95</span>%    <span class="hljs-number">110</span>
  <span class="hljs-number">98</span>%    <span class="hljs-number">127</span>
  <span class="hljs-number">99</span>%    <span class="hljs-number">137</span>
 <span class="hljs-number">100</span>%    <span class="hljs-number">200</span> (longest request)
</code></pre>